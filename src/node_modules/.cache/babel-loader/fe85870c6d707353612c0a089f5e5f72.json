{"ast":null,"code":"var _jsxFileName = \"/Users/mirtauhidulislam/Downloads/saltswap-frontend-main/src/views/Nft/components/NftCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport { Card, CardBody, Heading, Tag, Button, ChevronUpIcon, ChevronDownIcon, Text, CardFooter, useModal } from '@saltswap/uikit';\nimport { useProfile } from 'state/hooks';\nimport useI18n from 'hooks/useI18n';\nimport InfoRow from '../InfoRow';\nimport Image from '../Image';\nimport { NftProviderContext } from '../../contexts/NftProvider';\nimport TransferNftModal from '../TransferNftModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`;\n_c = Header;\nconst DetailsButton = styled(Button).attrs({\n  variant: 'text',\n  fullWidth: true\n})`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`;\n_c2 = DetailsButton;\nconst InfoBlock = styled.div`\n  padding: 24px;\n`;\n_c3 = InfoBlock;\n\nconst NftCard = ({\n  nft\n}) => {\n  _s();\n\n  var _profile$nft;\n\n  const [isOpen, setIsOpen] = useState(false);\n  const TranslateString = useI18n();\n  const {\n    isInitialized,\n    getTokenIds,\n    reInitialize\n  } = useContext(NftProviderContext);\n  const {\n    profile\n  } = useProfile();\n  const {\n    bunnyId,\n    name,\n    images,\n    description\n  } = nft;\n  const tokenIds = getTokenIds(bunnyId);\n  const walletOwnsNft = tokenIds && tokenIds.length > 0;\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon;\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleSuccess = () => {\n    reInitialize();\n  };\n\n  const [onPresentTransferModal] = useModal( /*#__PURE__*/_jsxDEV(TransferNftModal, {\n    nft: nft,\n    tokenIds: tokenIds,\n    onSuccess: handleSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Card, {\n    isActive: walletOwnsNft,\n    children: [/*#__PURE__*/_jsxDEV(Image, {\n      src: `/images/nfts/${images.lg}`,\n      alt: name,\n      originalLink: walletOwnsNft ? images.ipfs : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), isInitialized && tokenIds && /*#__PURE__*/_jsxDEV(Tag, {\n          outline: true,\n          variant: \"secondary\",\n          children: TranslateString(999, 'In Wallet')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), (profile === null || profile === void 0 ? void 0 : (_profile$nft = profile.nft) === null || _profile$nft === void 0 ? void 0 : _profile$nft.bunnyId) === bunnyId && /*#__PURE__*/_jsxDEV(Tag, {\n          outline: true,\n          variant: \"success\",\n          children: TranslateString(999, 'Profile Pic')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), isInitialized && walletOwnsNft && /*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        variant: \"secondary\",\n        mt: \"24px\",\n        onClick: onPresentTransferModal,\n        children: TranslateString(999, 'Transfer')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n      p: \"0\",\n      children: [/*#__PURE__*/_jsxDEV(DetailsButton, {\n        endIcon: /*#__PURE__*/_jsxDEV(Icon, {\n          width: \"24px\",\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 33\n        }, this),\n        onClick: handleClick,\n        children: TranslateString(658, 'Details')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(InfoBlock, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          style: {\n            textAlign: 'center'\n          },\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NftCard, \"UUwrT7fLz3lplQ6eFBw5Bsarf7Y=\", false, function () {\n  return [useI18n, useProfile, useModal];\n});\n\n_c4 = NftCard;\nexport default NftCard;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"DetailsButton\");\n$RefreshReg$(_c3, \"InfoBlock\");\n$RefreshReg$(_c4, \"NftCard\");","map":{"version":3,"sources":["/Users/mirtauhidulislam/Downloads/saltswap-frontend-main/src/views/Nft/components/NftCard/index.tsx"],"names":["React","useState","useContext","styled","Card","CardBody","Heading","Tag","Button","ChevronUpIcon","ChevronDownIcon","Text","CardFooter","useModal","useProfile","useI18n","InfoRow","Image","NftProviderContext","TransferNftModal","Header","DetailsButton","attrs","variant","fullWidth","InfoBlock","div","NftCard","nft","isOpen","setIsOpen","TranslateString","isInitialized","getTokenIds","reInitialize","profile","bunnyId","name","images","description","tokenIds","walletOwnsNft","length","Icon","handleClick","handleSuccess","onPresentTransferModal","lg","ipfs","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@saltswap/uikit'\nimport { useProfile } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 24px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const TranslateString = useI18n()\n  const { isInitialized, getTokenIds, reInitialize } = useContext(NftProviderContext)\n  const { profile } = useProfile()\n  const { bunnyId, name, images, description } = nft\n  const tokenIds = getTokenIds(bunnyId)\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen)\n  }\n\n  const handleSuccess = () => {\n    reInitialize()\n  }\n\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${images.lg}`} alt={name} originalLink={walletOwnsNft ? images.ipfs : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n          {profile?.nft?.bunnyId === bunnyId && (\n            <Tag outline variant=\"success\">\n              {TranslateString(999, 'Profile Pic')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {TranslateString(658, 'Details')}\n        </DetailsButton>\n        {isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n"]},"metadata":{},"sourceType":"module"}