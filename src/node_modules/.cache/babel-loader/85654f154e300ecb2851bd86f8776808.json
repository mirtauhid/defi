{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20ABI from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport farmsConfig from 'config/constants/farms';\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers';\nexport const fetchFarmUserAllowances = async account => {\n  const masterChefAdress = getMasterChefAddress();\n  const calls = farmsConfig.map(farm => {\n    const lpContractAddress = getAddress(farm.lpAddresses);\n    return {\n      address: lpContractAddress,\n      name: 'allowance',\n      params: [account, masterChefAdress]\n    };\n  });\n  const rawLpAllowances = await multicall(erc20ABI, calls);\n  const parsedLpAllowances = rawLpAllowances.map(lpBalance => new BigNumber(lpBalance).toJSON());\n  return parsedLpAllowances;\n};\nexport const fetchFarmUserTokenBalances = async account => {\n  const calls = farmsConfig.map(farm => {\n    const lpContractAddress = getAddress(farm.lpAddresses);\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account]\n    };\n  });\n  const rawTokenBalances = await multicall(erc20ABI, calls);\n  const parsedTokenBalances = rawTokenBalances.map(tokenBalance => new BigNumber(tokenBalance).toJSON());\n  return parsedTokenBalances;\n};\nexport const fetchFarmUserStakedBalances = async account => {\n  const masterChefAdress = getMasterChefAddress();\n  const calls = farmsConfig.map(farm => ({\n    address: masterChefAdress,\n    name: 'userInfo',\n    params: [farm.pid, account]\n  }));\n  const rawStakedBalances = await multicall(masterchefABI, calls);\n  const parsedStakedBalances = rawStakedBalances.map(stakedBalance => new BigNumber(stakedBalance[0]._hex).toJSON());\n  return parsedStakedBalances;\n};\nexport const fetchFarmUserEarnings = async account => {\n  const masterChefAdress = getMasterChefAddress();\n  const calls = farmsConfig.map(farm => ({\n    address: masterChefAdress,\n    name: 'pendingCake',\n    params: [farm.pid, account]\n  }));\n  const rawEarnings = await multicall(masterchefABI, calls);\n  const parsedEarnings = rawEarnings.map(earnings => new BigNumber(earnings).toJSON());\n  return parsedEarnings;\n};","map":{"version":3,"sources":["/Users/mirtauhidulislam/Downloads/saltswap-frontend-main/src/state/farms/fetchFarmUser.ts"],"names":["BigNumber","erc20ABI","masterchefABI","multicall","farmsConfig","getAddress","getMasterChefAddress","fetchFarmUserAllowances","account","masterChefAdress","calls","map","farm","lpContractAddress","lpAddresses","address","name","params","rawLpAllowances","parsedLpAllowances","lpBalance","toJSON","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","pid","rawStakedBalances","parsedStakedBalances","stakedBalance","_hex","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = getAddress(farm.lpAddresses)\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => new BigNumber(lpBalance).toJSON())\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = getAddress(farm.lpAddresses)\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => new BigNumber(tokenBalance).toJSON())\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => ({\n    address: masterChefAdress,\n    name: 'userInfo',\n    params: [farm.pid, account],\n  }))\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => new BigNumber(stakedBalance[0]._hex).toJSON())\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => ({\n    address: masterChefAdress,\n    name: 'pendingCake',\n    params: [farm.pid, account],\n  }))\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => new BigNumber(earnings).toJSON())\n  return parsedEarnings\n}\n"]},"metadata":{},"sourceType":"module"}