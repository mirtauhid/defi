{"ast":null,"code":"var _jsxFileName = \"/Users/mirtauhidulislam/Downloads/saltswap-frontend-main/src/views/Ifos/components/IfoCard/IfoCardContribute.tsx\",\n    _s = $RefreshSig$();\n\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Button, Text, useModal } from '@saltswap/uikit';\nimport BigNumber from 'bignumber.js';\nimport { useIfoAllowance } from 'hooks/useAllowance';\nimport { useIfoApprove } from 'hooks/useApprove';\nimport { useERC20 } from 'hooks/useContract';\nimport React, { useEffect, useState } from 'react';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport ContributeModal from './ContributeModal';\nimport LabelButton from './LabelButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst IfoCardContribute = ({\n  address,\n  currency,\n  currencyAddress,\n  contract,\n  status,\n  raisingAmount,\n  tokenDecimals\n}) => {\n  _s();\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const [offeringTokenBalance, setOfferingTokenBalance] = useState(new BigNumber(0));\n  const [userInfo, setUserInfo] = useState({\n    amount: 0,\n    claimed: false\n  });\n  const {\n    account\n  } = useWallet();\n  const contractRaisingToken = useERC20(currencyAddress);\n  const allowance = useIfoAllowance(contractRaisingToken, address, pendingTx);\n  const onApprove = useIfoApprove(contractRaisingToken, address);\n  const [onPresentContributeModal] = useModal( /*#__PURE__*/_jsxDEV(ContributeModal, {\n    currency: currency,\n    contract: contract,\n    currencyAddress: currencyAddress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this));\n  useEffect(() => {\n    const fetch = async () => {\n      const balance = new BigNumber(await contract.methods.getOfferingAmount(account).call());\n      const userinfo = await contract.methods.userInfo(account).call();\n      setUserInfo(userinfo);\n      setOfferingTokenBalance(balance);\n    };\n\n    if (account) {\n      fetch();\n    }\n  }, [account, contract.methods, pendingTx]);\n\n  if (allowance === null) {\n    return null;\n  }\n\n  const claim = async () => {\n    setPendingTx(true);\n    await contract.methods.harvest().send({\n      from: account\n    });\n    setPendingTx(false);\n  };\n\n  const isFinished = status === 'finished';\n  const percentOfUserContribution = new BigNumber(userInfo.amount).div(raisingAmount).times(100);\n\n  if (allowance <= 0) {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      fullWidth: true,\n      disabled: pendingTx || isFinished,\n      onClick: async () => {\n        try {\n          setPendingTx(true);\n          await onApprove();\n          setPendingTx(false);\n        } catch (e) {\n          setPendingTx(false);\n          console.error(e);\n        }\n      },\n      children: \"Approve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LabelButton, {\n      disabled: pendingTx || userInfo.claimed,\n      buttonLabel: isFinished ? 'Claim' : 'Contribute',\n      label: isFinished ? 'Your tokens to claim' : `Your contribution (${currency})`,\n      value: // eslint-disable-next-line no-nested-ternary\n      isFinished ? userInfo.claimed ? 'Claimed' : getBalanceNumber(offeringTokenBalance, tokenDecimals).toFixed(4) : getBalanceNumber(new BigNumber(userInfo.amount)).toFixed(4),\n      onClick: isFinished ? claim : onPresentContributeModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"14px\",\n      color: \"textSubtle\",\n      children: isFinished ? `You'll be refunded any excess tokens when you claim` : `${percentOfUserContribution.toFixed(5)}% of total`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(IfoCardContribute, \"BKCdd/tLbIFtp3j/kVLJ8LzpGYc=\", false, function () {\n  return [useWallet, useERC20, useIfoAllowance, useIfoApprove, useModal];\n});\n\n_c = IfoCardContribute;\nexport default IfoCardContribute;\n\nvar _c;\n\n$RefreshReg$(_c, \"IfoCardContribute\");","map":{"version":3,"sources":["/Users/mirtauhidulislam/Downloads/saltswap-frontend-main/src/views/Ifos/components/IfoCard/IfoCardContribute.tsx"],"names":["useWallet","Button","Text","useModal","BigNumber","useIfoAllowance","useIfoApprove","useERC20","React","useEffect","useState","getBalanceNumber","ContributeModal","LabelButton","IfoCardContribute","address","currency","currencyAddress","contract","status","raisingAmount","tokenDecimals","pendingTx","setPendingTx","offeringTokenBalance","setOfferingTokenBalance","userInfo","setUserInfo","amount","claimed","account","contractRaisingToken","allowance","onApprove","onPresentContributeModal","fetch","balance","methods","getOfferingAmount","call","userinfo","claim","harvest","send","from","isFinished","percentOfUserContribution","div","times","e","console","error","toFixed"],"mappings":"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","sourcesContent":["import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Text, useModal } from '@saltswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { IfoStatus } from 'config/constants/types'\nimport { useIfoAllowance } from 'hooks/useAllowance'\nimport { useIfoApprove } from 'hooks/useApprove'\nimport { useERC20 } from 'hooks/useContract'\nimport React, { useEffect, useState } from 'react'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Contract } from 'web3-eth-contract'\nimport ContributeModal from './ContributeModal'\nimport LabelButton from './LabelButton'\n\nexport interface Props {\n  address: string\n  currency: string\n  currencyAddress: string\n  contract: Contract\n  status: IfoStatus\n  raisingAmount: BigNumber\n  tokenDecimals: number\n}\n\nconst IfoCardContribute: React.FC<Props> = ({\n  address,\n  currency,\n  currencyAddress,\n  contract,\n  status,\n  raisingAmount,\n  tokenDecimals,\n}) => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const [offeringTokenBalance, setOfferingTokenBalance] = useState(new BigNumber(0))\n  const [userInfo, setUserInfo] = useState({ amount: 0, claimed: false })\n\n  const { account } = useWallet()\n  const contractRaisingToken = useERC20(currencyAddress)\n  const allowance = useIfoAllowance(contractRaisingToken, address, pendingTx)\n  const onApprove = useIfoApprove(contractRaisingToken, address)\n  const [onPresentContributeModal] = useModal(\n    <ContributeModal currency={currency} contract={contract} currencyAddress={currencyAddress} />,\n  )\n\n  useEffect(() => {\n    const fetch = async () => {\n      const balance = new BigNumber(await contract.methods.getOfferingAmount(account).call())\n      const userinfo = await contract.methods.userInfo(account).call()\n\n      setUserInfo(userinfo)\n      setOfferingTokenBalance(balance)\n    }\n\n    if (account) {\n      fetch()\n    }\n  }, [account, contract.methods, pendingTx])\n\n  if (allowance === null) {\n    return null\n  }\n\n  const claim = async () => {\n    setPendingTx(true)\n    await contract.methods.harvest().send({ from: account })\n    setPendingTx(false)\n  }\n  const isFinished = status === 'finished'\n  const percentOfUserContribution = new BigNumber(userInfo.amount).div(raisingAmount).times(100)\n\n  if (allowance <= 0) {\n    return (\n      <Button\n        fullWidth\n        disabled={pendingTx || isFinished}\n        onClick={async () => {\n          try {\n            setPendingTx(true)\n            await onApprove()\n            setPendingTx(false)\n          } catch (e) {\n            setPendingTx(false)\n            console.error(e)\n          }\n        }}\n      >\n        Approve\n      </Button>\n    )\n  }\n\n  return (\n    <>\n      <LabelButton\n        disabled={pendingTx || userInfo.claimed}\n        buttonLabel={isFinished ? 'Claim' : 'Contribute'}\n        label={isFinished ? 'Your tokens to claim' : `Your contribution (${currency})`}\n        value={\n          // eslint-disable-next-line no-nested-ternary\n          isFinished\n            ? userInfo.claimed\n              ? 'Claimed'\n              : getBalanceNumber(offeringTokenBalance, tokenDecimals).toFixed(4)\n            : getBalanceNumber(new BigNumber(userInfo.amount)).toFixed(4)\n        }\n        onClick={isFinished ? claim : onPresentContributeModal}\n      />\n      <Text fontSize=\"14px\" color=\"textSubtle\">\n        {isFinished\n          ? `You'll be refunded any excess tokens when you claim`\n          : `${percentOfUserContribution.toFixed(5)}% of total`}\n      </Text>\n    </>\n  )\n}\n\nexport default IfoCardContribute\n"]},"metadata":{},"sourceType":"module"}