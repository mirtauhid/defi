{"ast":null,"code":"var _jsxFileName = \"/Users/mirtauhidulislam/Downloads/saltswap-frontend-main/src/views/Nft/contexts/NftProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useRef, useState } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport useBlock from 'hooks/useBlock';\nimport useGetWalletNfts from 'hooks/useGetWalletNfts';\nimport { getBunnyFactoryAddress } from 'utils/addressHelpers';\nimport { getPancakeRabbitContract } from 'utils/contractHelpers';\nimport multicall from 'utils/multicall';\nimport bunnyFactory from 'config/abi/bunnyFactory.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bunnyFactoryAddress = getBunnyFactoryAddress();\nexport const NftProviderContext = /*#__PURE__*/createContext(null);\n\nconst NftProvider = ({\n  children\n}) => {\n  _s();\n\n  const isMounted = useRef(true);\n  const [state, setState] = useState({\n    isInitialized: false,\n    hasClaimed: false,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    balanceOf: 0\n  });\n  const {\n    account\n  } = useWallet();\n  const currentBlock = useBlock();\n  const {\n    nfts: nftList\n  } = useGetWalletNfts();\n  const {\n    isInitialized\n  } = state; // Static data\n\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [startBlockNumberArr, endBlockNumberArr] = await multicall(bunnyFactory, [{\n          address: bunnyFactoryAddress,\n          name: 'startBlockNumber'\n        }, {\n          address: bunnyFactoryAddress,\n          name: 'endBlockNumber'\n        }]); // TODO: Figure out why these are coming back as arrays\n\n        const [startBlockNumber] = startBlockNumberArr;\n        const [endBlockNumber] = endBlockNumberArr;\n        setState(prevState => ({ ...prevState,\n          isInitialized: true,\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber()\n        }));\n      } catch (error) {\n        console.error('an error occured', error);\n      }\n    };\n\n    fetchContractData();\n  }, [isInitialized, setState]); // Data from the contract that needs an account\n\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const pancakeRabbitsContract = getPancakeRabbitContract();\n        const [hasClaimedArr] = await multicall(bunnyFactory, [{\n          address: bunnyFactoryAddress,\n          name: 'hasClaimed',\n          params: [account]\n        }]);\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call();\n        const [hasClaimed] = hasClaimedArr;\n        setState(prevState => ({ ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          balanceOf\n        }));\n      } catch (error) {\n        console.error('an error occured', error);\n      }\n    };\n\n    if (account) {\n      fetchContractData();\n    }\n  }, [isInitialized, account, setState]);\n  useEffect(() => () => {\n    isMounted.current = false;\n  }, [isMounted]);\n  const canBurnNft = currentBlock <= state.endBlockNumber;\n\n  const getTokenIds = bunnyId => {\n    var _nftList$bunnyId;\n\n    return (_nftList$bunnyId = nftList[bunnyId]) === null || _nftList$bunnyId === void 0 ? void 0 : _nftList$bunnyId.tokenIds;\n  };\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n\n\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState(prevState => ({ ...prevState,\n        isInitialized: false\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(NftProviderContext.Provider, {\n    value: { ...state,\n      nfts: nftList,\n      canBurnNft,\n      getTokenIds,\n      reInitialize\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NftProvider, \"0659eigVka3BB9kANfX8SNCUsb4=\", false, function () {\n  return [useWallet, useBlock, useGetWalletNfts];\n});\n\n_c = NftProvider;\nexport default NftProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"NftProvider\");","map":{"version":3,"sources":["/Users/mirtauhidulislam/Downloads/saltswap-frontend-main/src/views/Nft/contexts/NftProvider.tsx"],"names":["React","createContext","useEffect","useRef","useState","useWallet","useBlock","useGetWalletNfts","getBunnyFactoryAddress","getPancakeRabbitContract","multicall","bunnyFactory","bunnyFactoryAddress","NftProviderContext","NftProvider","children","isMounted","state","setState","isInitialized","hasClaimed","startBlockNumber","endBlockNumber","balanceOf","account","currentBlock","nfts","nftList","fetchContractData","startBlockNumberArr","endBlockNumberArr","address","name","prevState","toNumber","error","console","pancakeRabbitsContract","hasClaimedArr","params","methods","call","current","canBurnNft","getTokenIds","bunnyId","tokenIds","reInitialize"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport useGetWalletNfts, { NftMap } from 'hooks/useGetWalletNfts'\nimport { getBunnyFactoryAddress } from 'utils/addressHelpers'\nimport { getPancakeRabbitContract } from 'utils/contractHelpers'\nimport multicall from 'utils/multicall'\nimport bunnyFactory from 'config/abi/bunnyFactory.json'\n\nconst bunnyFactoryAddress = getBunnyFactoryAddress()\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: boolean\n  endBlockNumber: number\n  startBlockNumber: number\n  balanceOf: number\n}\n\ntype Context = {\n  nfts: NftMap\n  canBurnNft: boolean\n  getTokenIds: (bunnyId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: false,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    balanceOf: 0,\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n  const { nfts: nftList } = useGetWalletNfts()\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [startBlockNumberArr, endBlockNumberArr] = await multicall(bunnyFactory, [\n          { address: bunnyFactoryAddress, name: 'startBlockNumber' },\n          { address: bunnyFactoryAddress, name: 'endBlockNumber' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const pancakeRabbitsContract = getPancakeRabbitContract()\n        const [hasClaimedArr] = await multicall(bunnyFactory, [\n          { address: bunnyFactoryAddress, name: 'hasClaimed', params: [account] },\n        ])\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\n        const [hasClaimed]: [boolean] = hasClaimedArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          balanceOf,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(\n    () => () => {\n      isMounted.current = false\n    },\n    [isMounted],\n  )\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (bunnyId: number) => nftList[bunnyId]?.tokenIds\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, nfts: nftList, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n"]},"metadata":{},"sourceType":"module"}