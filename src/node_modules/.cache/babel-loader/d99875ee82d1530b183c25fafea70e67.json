{"ast":null,"code":"var _jsxFileName = \"/Users/mirtauhidulislam/Downloads/saltswap-frontend-main/src/views/Profile/ProfileCreation/contexts/ProfileCreationProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useMemo, useReducer } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { getBunnyFactoryContract } from 'utils/contractHelpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isInitialized: false,\n  currentStep: 0,\n  teamId: null,\n  tokenId: null,\n  userName: '',\n  minimumCakeRequired: new BigNumber(5).multipliedBy(new BigNumber(10).pow(18)),\n  // 5 CAKE\n  allowance: new BigNumber(25).multipliedBy(new BigNumber(10).pow(18)) // 25 CAKE\n\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'initialize':\n      return { ...state,\n        isInitialized: true,\n        currentStep: action.step\n      };\n\n    case 'next_step':\n      return { ...state,\n        currentStep: state.currentStep + 1\n      };\n\n    case 'set_team':\n      return { ...state,\n        teamId: action.teamId\n      };\n\n    case 'set_tokenid':\n      return { ...state,\n        tokenId: action.tokenId\n      };\n\n    case 'set_username':\n      return { ...state,\n        userName: action.userName\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ProfileCreationContext = /*#__PURE__*/createContext(null);\n\nconst ProfileCreationProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    account\n  } = useWallet(); // Initial checks\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const bunnyFactoryContract = getBunnyFactoryContract();\n      const canMint = await bunnyFactoryContract.methods.canMint(account).call();\n      dispatch({\n        type: 'initialize',\n        step: canMint ? 0 : 1\n      });\n    };\n\n    if (account) {\n      fetchData();\n    }\n  }, [account, dispatch]);\n  const actions = useMemo(() => ({\n    nextStep: () => dispatch({\n      type: 'next_step'\n    }),\n    setTeamId: teamId => dispatch({\n      type: 'set_team',\n      teamId\n    }),\n    setTokenId: tokenId => dispatch({\n      type: 'set_tokenid',\n      tokenId\n    }),\n    setUserName: userName => dispatch({\n      type: 'set_username',\n      userName\n    })\n  }), [dispatch]);\n  return /*#__PURE__*/_jsxDEV(ProfileCreationContext.Provider, {\n    value: { ...state,\n      actions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ProfileCreationProvider, \"iEEslrGikEKfCHQzfiTLjtOopqA=\", false, function () {\n  return [useWallet];\n});\n\n_c = ProfileCreationProvider;\nexport default ProfileCreationProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileCreationProvider\");","map":{"version":3,"sources":["/Users/mirtauhidulislam/Downloads/saltswap-frontend-main/src/views/Profile/ProfileCreation/contexts/ProfileCreationProvider.tsx"],"names":["React","createContext","useEffect","useMemo","useReducer","BigNumber","useWallet","getBunnyFactoryContract","initialState","isInitialized","currentStep","teamId","tokenId","userName","minimumCakeRequired","multipliedBy","pow","allowance","reducer","state","action","type","step","ProfileCreationContext","ProfileCreationProvider","children","dispatch","account","fetchData","bunnyFactoryContract","canMint","methods","call","actions","nextStep","setTeamId","setTokenId","setUserName"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useMemo, useReducer } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { getBunnyFactoryContract } from 'utils/contractHelpers'\nimport { Actions, State, ContextType } from './types'\n\nconst initialState: State = {\n  isInitialized: false,\n  currentStep: 0,\n  teamId: null,\n  tokenId: null,\n  userName: '',\n  minimumCakeRequired: new BigNumber(5).multipliedBy(new BigNumber(10).pow(18)), // 5 CAKE\n  allowance: new BigNumber(25).multipliedBy(new BigNumber(10).pow(18)), // 25 CAKE\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'initialize':\n      return {\n        ...state,\n        isInitialized: true,\n        currentStep: action.step,\n      }\n    case 'next_step':\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      }\n    case 'set_team':\n      return {\n        ...state,\n        teamId: action.teamId,\n      }\n    case 'set_tokenid':\n      return {\n        ...state,\n        tokenId: action.tokenId,\n      }\n    case 'set_username':\n      return {\n        ...state,\n        userName: action.userName,\n      }\n    default:\n      return state\n  }\n}\n\nexport const ProfileCreationContext = createContext<ContextType>(null)\n\nconst ProfileCreationProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWallet()\n\n  // Initial checks\n  useEffect(() => {\n    const fetchData = async () => {\n      const bunnyFactoryContract = getBunnyFactoryContract()\n      const canMint = await bunnyFactoryContract.methods.canMint(account).call()\n      dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n    }\n\n    if (account) {\n      fetchData()\n    }\n  }, [account, dispatch])\n\n  const actions: ContextType['actions'] = useMemo(\n    () => ({\n      nextStep: () => dispatch({ type: 'next_step' }),\n      setTeamId: (teamId: number) => dispatch({ type: 'set_team', teamId }),\n      setTokenId: (tokenId: number) => dispatch({ type: 'set_tokenid', tokenId }),\n      setUserName: (userName: string) => dispatch({ type: 'set_username', userName }),\n    }),\n    [dispatch],\n  )\n\n  return <ProfileCreationContext.Provider value={{ ...state, actions }}>{children}</ProfileCreationContext.Provider>\n}\n\nexport default ProfileCreationProvider\n"]},"metadata":{},"sourceType":"module"}